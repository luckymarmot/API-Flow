{
  "swagger": "2.0",
  "info": {
    "title": "World Music API",
    "description": "This is an example of a music API.",
    "version": "v1"
  },
  "host": "{environment}.musicapi.com",
  "schemes": [
    "http",
    "https"
  ],
  "basePath": "/{version}",
  "consumes": [
    "application/json"
  ],
  "paths": {
    "/api": {
      "get": {
        "description": "This was loaded from api-library",
        "parameters": [
          {
            "type": "string",
            "x-real-type": "object",
            "name": "queryString",
            "required": false,
            "in": "query"
          }
        ],
        "responses": {
          "default": {
            "description": ""
          }
        },
        "security": [
          {
            "ApiLib.basic_api": []
          }
        ]
      },
      "post": {
        "description": "This is an awesome description",
        "tags": [
          "trait_ApiLib.described"
        ],
        "parameters": [
          {
            "required": false,
            "schema": {
              "$ref": "#/definitions/ApiLib.RamlDataType"
            },
            "in": "body",
            "name": "body"
          }
        ],
        "responses": {
          "default": {
            "description": ""
          }
        }
      }
    },
    "/entry": {
      "post": {
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/AnotherEntry"
            }
          }
        }
      },
      "get": {
        "description": "returns a list of entry",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object"
            }
          }
        }
      }
    },
    "/songs": {
      "get": {
        "description": "This was loaded from songs-library",
        "parameters": [
          {
            "type": "string",
            "name": "genre",
            "description": "filter the songs by genre",
            "required": false,
            "in": "query"
          },
          {
            "type": "string",
            "name": "access_token",
            "required": false,
            "in": "query"
          }
        ],
        "responses": {
          "default": {
            "description": ""
          }
        },
        "security": [
          {
            "oauth_2_0": []
          }
        ]
      },
      "post": {
        "parameters": [
          {
            "type": "string",
            "name": "access_token",
            "required": false,
            "in": "query"
          }
        ],
        "responses": {
          "default": {
            "description": ""
          }
        }
      }
    },
    "/songs/{songId}": {
      "get": {
        "produces": [
          "application/json",
          "application/xml"
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/SongsLib.Song"
            }
          }
        },
        "parameters": [
          {
            "type": "string",
            "name": "songId",
            "required": true,
            "in": "path"
          }
        ]
      }
    }
  },
  "definitions": {
    "Entry": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/Song"
      }
    },
    "Song": {
      "type": "object",
      "properties": {
        "title": {
          "type": "string"
        },
        "artist": {
          "type": "string"
        }
      }
    },
    "AnotherEntry": {
      "$ref": "#/definitions/Entry",
      "description": "# This is in Markdown\nThis is to see what the representation of this ~~Markdown~~ string is.\n## SubTitle\nThis is just another entry to **simulate** that you can add facets also on JSON\nschema defined types. Although you can only add documentation-based facets.\n"
    },
    "SpecialEntry": {
      "type": "string",
      "pattern": "^.{12}$"
    },
    "Toy": {
      "type": "object",
      "minProperties": 2,
      "maxProperties": 8,
      "discriminator": "name",
      "properties": {
        "name": {
          "type": "string"
        },
        "soft": {
          "type": "boolean",
          "x-examples": [
            true
          ]
        },
        "squiky": {
          "type": "boolean"
        },
        "heavy": {
          "type": "boolean"
        },
        "clean": {
          "type": "boolean"
        },
        "purchaseDate": {
          "type": "string",
          "$ref": "#/definitions/$DateOnly"
        },
        "more": {
          "type": "string",
          "$ref": "#/definitions/$DateTime"
        },
        "final": {
          "type": "string",
          "$ref": "#/definitions/$DateTimeOnly"
        }
      },
      "required": [
        "name",
        "soft",
        "squiky",
        "heavy",
        "clean",
        "purchaseDate",
        "more",
        "final"
      ]
    },
    "$DateOnly": {
      "type": "string",
      "pattern": "^[0-9]{4}-(0[1-9]|1[0-2])-(0[1-9]|[12][0-9]|3[01])$",
      "description": "full-date as defined in RFC#3339"
    },
    "$DateTime": {
      "type": "string",
      "description": "datetime"
    },
    "$DateTimeOnly": {
      "type": "string",
      "pattern": "^[0-9]{4}-(0[1-9]|1[0-2])-(0[1-9]|[12][0-9]|3[01])T([01][0-9]|20|21|22|23):[0-5][0-9]:([0-5][0-9]|60)(.[0-9]+)?$",
      "description": "full-time as defined in RFC#3339"
    },
    "Ball": {
      "allOf": [
        {
          "$ref": "#/definitions/Toy"
        }
      ],
      "discriminatorValue": "ball",
      "properties": {
        "bouncinessFactor": {
          "type": "number",
          "minimum": 0
        }
      },
      "required": [
        "bouncinessFactor"
      ]
    },
    "Rope": {
      "allOf": [
        {
          "$ref": "#/definitions/Toy"
        }
      ],
      "discriminatorValue": "rope",
      "properties": {
        "length": {
          "type": "integer",
          "enum": [
            "10",
            "20",
            "50",
            "100"
          ],
          "x-examples": [
            10
          ]
        }
      },
      "required": [
        "length"
      ]
    },
    "CommonToy": {
      "anyOf": [
        {
          "$ref": "#/definitions/Ball"
        },
        {
          "$ref": "#/definitions/Rope"
        }
      ]
    },
    "Treat": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "tastiness": {
          "type": "number",
          "minimum": 0,
          "maximum": 1
        }
      },
      "required": [
        "name",
        "tastiness"
      ]
    },
    "Pet": {
      "type": "object",
      "properties": {
        "claws": {
          "type": "number",
          "minimum": 0,
          "maximum": 4
        },
        "color": {
          "type": "string",
          "minLength": 7,
          "maxLength": 7,
          "pattern": "^#[0-9a-f]{6}$"
        },
        "size": {
          "type": "number",
          "multipleOf": 5
        },
        "weigth": {
          "type": "number"
        },
        "mostActiveAt": {
          "type": "string",
          "$ref": "#/definitions/$TimeOnly"
        },
        "owner": {
          "$ref": "#/definitions/User"
        },
        "toys": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Toy"
          }
        }
      },
      "required": [
        "claws",
        "color",
        "size",
        "weigth",
        "mostActiveAt",
        "owner",
        "toys"
      ]
    },
    "$TimeOnly": {
      "type": "string",
      "pattern": "^([01][0-9]|20|21|22|23):[0-5][0-9]:([0-5][0-9]|60)(.[0-9]+)?$",
      "description": "full-time as defined in RFC#3339"
    },
    "Resident": {
      "type": "object",
      "properties": {
        "address": {
          "type": "string"
        }
      },
      "required": [
        "address"
      ]
    },
    "Wild": {
      "type": "object",
      "properties": {
        "location": {
          "type": "string"
        }
      },
      "required": [
        "location"
      ]
    },
    "FarmPet": {
      "allOf": [
        {
          "$ref": "#/definitions/Pet"
        },
        {
          "anyOf": [
            {
              "$ref": "#/definitions/Resident"
            },
            {
              "$ref": "#/definitions/Wild"
            }
          ]
        }
      ],
      "title": "Farm Pet"
    },
    "ToyBox": {
      "type": "array",
      "uniqueItems": false,
      "minItems": 1,
      "maxItems": 15,
      "items": {
        "anyOf": [
          {
            "$ref": "#/definitions/Toy"
          },
          {
            "$ref": "#/definitions/Treat"
          }
        ]
      }
    },
    "BigToyBox": {
      "allOf": [
        {
          "$ref": "#/definitions/ToyBox"
        }
      ],
      "maxItems": 100
    },
    "Photo": {
      "type": "string",
      "$ref": "#/definitions/$File"
    },
    "$File": {
      "type": "string",
      "description": "file",
      "pattern": "^[^\u0000]*\u0000$"
    },
    "Album": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/Photo"
      }
    },
    "Weird": {},
    "Habitats": {
      "type": "array",
      "items": {
        "anyOf": [
          {
            "$ref": "#/definitions/Resident"
          },
          {
            "$ref": "#/definitions/Wild"
          }
        ]
      }
    },
    "SeparateKinds": {
      "anyOf": [
        {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Resident"
          }
        },
        {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Wild"
          }
        }
      ]
    },
    "User": {
      "type": "object",
      "properties": {
        "firstname": {
          "type": "string"
        },
        "lastname": {
          "type": "string",
          "x-examples": [
            "Doe"
          ]
        },
        "pets": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/FarmPet"
          }
        },
        "box": {
          "$ref": "#/definitions/ToyBox"
        },
        "albums": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Album"
          }
        }
      },
      "required": [
        "firstname"
      ],
      "x-examples": [
        {
          "firstname": "John"
        }
      ]
    },
    "SongsLib.Song": {
      "type": "object",
      "properties": {
        "title": {
          "type": "string"
        },
        "length": {
          "type": "number"
        }
      },
      "required": [
        "title",
        "length"
      ],
      "x-examples": [
        {
          "title": "My Song",
          "length": 12
        },
        {
          "title": "Last",
          "length": 3
        }
      ]
    },
    "SongsLib.Album": {
      "type": "object",
      "properties": {
        "title": {
          "type": "string"
        },
        "songs": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/SongsLib.Song"
          }
        }
      },
      "required": [
        "title",
        "songs"
      ]
    },
    "SongsLib.Musician": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "discography": {
          "type": "array",
          "items": {
            "anyOf": [
              {
                "$ref": "#/definitions/SongsLib.Song"
              },
              {
                "$ref": "#/definitions/SongsLib.Album"
              }
            ]
          }
        }
      },
      "required": [
        "name",
        "discography"
      ]
    },
    "ApiLib.RamlDataType": {
      "type": "object",
      "properties": {
        "propString": {
          "type": "string"
        },
        "propStringArray1": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "ideas": {
          "type": "array"
        },
        "extIdeas": {
          "properties": {
            "createdBy": {
              "type": "string"
            }
          },
          "required": [
            "createdBy"
          ]
        },
        "feedback": {
          "type": "string",
          "minLength": 1,
          "maxLength": 255,
          "pattern": "[a-zA-Z\\s]*",
          "x-examples": [
            "very well made"
          ]
        },
        "propNumber": {
          "type": "number",
          "minimum": 0,
          "maximum": 32,
          "multipleOf": 2
        },
        "propInteger": {
          "type": "integer",
          "minimum": 3,
          "maximum": 5,
          "multipleOf": 1
        },
        "propBoolean": {
          "type": "boolean"
        },
        "propDate": {
          "type": "string",
          "$ref": "#/definitions/ApiLib.$DateOnly",
          "x-examples": [
            "2015-05-23"
          ]
        },
        "userPicture": {
          "type": "string",
          "$ref": "#/definitions/ApiLib.$File"
        },
        "NilValue": {
          "type": "object",
          "properties": {
            "name": {
              "type": "string"
            },
            "comment": {
              "$ref": "#/definitions/ApiLib.string?"
            }
          },
          "required": [
            "name",
            "comment"
          ]
        },
        "CatOrDog": {
          "anyOf": [
            {
              "$ref": "#/definitions/ApiLib.Cat"
            },
            {
              "$ref": "#/definitions/ApiLib.Dog"
            }
          ]
        },
        "CatAndDog": {
          "$ref": "#/definitions/ApiLib.Dog"
        },
        "PossibleMeetingDate": {
          "type": "string",
          "$ref": "#/definitions/ApiLib.$DateOnly"
        }
      },
      "required": [
        "propString",
        "propStringArray1",
        "ideas",
        "extIdeas",
        "feedback",
        "propNumber",
        "propInteger",
        "propBoolean",
        "propDate",
        "userPicture",
        "NilValue",
        "CatOrDog",
        "CatAndDog",
        "CatAndDog",
        "PossibleMeetingDate"
      ]
    },
    "ApiLib.$DateOnly": {
      "type": "string",
      "pattern": "^[0-9]{4}-(0[1-9]|1[0-2])-(0[1-9]|[12][0-9]|3[01])$",
      "description": "full-date as defined in RFC#3339"
    },
    "ApiLib.$File": {
      "type": "string",
      "description": "file",
      "pattern": "^[^\u0000]*\u0000$"
    },
    "ApiLib.Cat": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "color": {
          "type": "string"
        }
      },
      "required": [
        "name",
        "color"
      ]
    },
    "ApiLib.Dog": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "fangs": {
          "type": "string"
        }
      },
      "required": [
        "name",
        "fangs"
      ]
    },
    "ApiLib.CustomDate": {
      "type": "string",
      "$ref": "#/definitions/ApiLib.$DateOnly"
    }
  },
  "securityDefinitions": {
    "oauth_2_0": {
      "description": "Dropbox supports OAuth 2.0 for authenticating all API requests.\n",
      "flow": "accessCode",
      "authorizationUrl": "https://www.dropbox.com/1/oauth2/authorize",
      "tokenUrl": "https://api.dropbox.com/1/oauth2/token",
      "type": "oauth2",
      "scopes": {}
    },
    "basic_api": {
      "type": "basic",
      "description": "This is our super secure api auth"
    }
  },
  "tags": [
    {
      "name": "resourceType_SongsLib.collectionfromSongsLib"
    },
    {
      "name": "resourceType_ApiLib.collectionFromApiLib"
    },
    {
      "name": "resourceType_collection"
    },
    {
      "name": "trait_ApiLib.described"
    },
    {
      "name": "trait_secured",
      "description": "This trait can be used to apply an access token query parameter\nto any resources or HTTP methods.\n"
    }
  ]
}