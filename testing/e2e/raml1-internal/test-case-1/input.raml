#%RAML 1.0
title: World Music API
description: This is an example of a music API.
version: v1
baseUri:
  value: http://{environment}.musicapi.com/{version}
  (rediractable): true
baseUriParameters:
  environment:
    type: string
    enum: [ "stg", "dev", "test", "prod" ]
protocols: [  HTTP, HTTPS ]
mediaType: [ application/json ]
documentation:
  - title: Getting Started
    content: |
      This is a getting started guide for the World Music API.
  - title: Legal
    content: See http://legal.musicapi.com
types:
  Entry: |
    {
      "type": "array",
      "items": {
        "$ref": "#/definitions/Song"
      },
      "definitions": {
        "Song": {
          "type": "object",
          "properties": {
            "title": {
              "type": "string"
            },
            "artist": {
              "type": "string"
            }
          }
        }
      }
    }
  AnotherEntry:
    type: Entry
    description: |
      # This is in Markdown
      This is to see what the representation of this ~~Markdown~~ string is.
      ## SubTitle
      This is just another entry to **simulate** that you can add facets also on JSON
      schema defined types. Although you can only add documentation-based facets.
  SpecialEntry:
    type: |
      {
        "type": "string",
        "pattern": "^.{12}$"
      }
  Toy:
    properties:
      name: string
      soft:
        type: boolean
        example: true
      squiky: boolean
      heavy: boolean
      clean: boolean
      purchaseDate: date-only
      more: datetime
      final: datetime-only
    minProperties: 2
    maxProperties: 8
    discriminator: name
  Ball:
    type: Toy
    properties:
      bouncinessFactor:
        type: number
        format: int64
        minimum: 0
    discriminatorValue: ball
  Rope:
    type: Toy
    properties:
      length:
        type: integer
        enum: [ 10, 20, 50, 100 ]
        example: 10
    discriminatorValue: rope
  CommonToy:
    type: Ball | Rope
  Treat:
    facets:
      vegan?: boolean
      vegeterian: boolean
    properties:
      name: string
      tastiness:
        type: number
        minimum: 0
        maximum: 1
  Pet:
    properties:
      claws:
        type: number
        minimum: 0
        maximum: 4
      color:
        type: string
        pattern: "^#[0-9a-f]{6}$"
        minLength: 7
        maxLength: 7
      size:
        type: number
        multipleOf: 5
      weigth:
        type: number
        format: float
      mostActiveAt:
        type: time-only
      owner: User
      toys: Toy[]
  Resident:
    properties:
      address: string
  Wild:
    properties:
      location: string
  FarmPet:
    displayName: 'Farm Pet'
    type: [ Pet, Resident | Wild ]
  ToyBox:
    type: array
    items: Toy | Treat
    minItems: 1
    maxItems: 15
    uniqueItems: false
  BigToyBox:
    type: ToyBox
    maxItems: 100
  Photo:
    type: file
    fileTypes: [ 'image/jpeg', 'image/png' ]
    maxLength: 1048576
  Album:
    type: array
    items: Photo
  Weird:
    type: any
  Habitats:
    type: ( Resident | Wild )[]
  SeparateKinds:
    type: Resident[] | Wild[]
  User:
    properties:
      firstname: string
      lastname:
        type: string
        example: Doe
        required: false
      pets:
        type: FarmPet[]
        required: false
      box:
        type: ToyBox
        required: false
      albums:
        type: Album[]
        required: false
    example:
      firstname: John

traits:
  secured: !include secured/accessToken.raml

resourceTypes:
  collection:
    get:
      description: returns a list of <<resourcePathName|!singularize>>
      responses:
        200:
          body:
            application/json:
              schema: <<resourcePathName|!singularize|!uppercamelcase>>


annotationTypes:
  deprecated:
    properties:
      date: datetime
      deprecatedBy: User
      comment: nil | string
  monitoringInterval:
    type: integer
    description: interval in seconds
    example: 2
  ready:
    type: nil
    description: markes a resource as ready
    allowedTargets: Resource
  info:
    properties:
      license:
        type: string
        enum: [ "MIT", "Apache 2.0" ]
    allowedTargets: API
  rediractable: boolean

(info):
  license: MIT

securitySchemes:
  oauth_1_0:
    description: |
      OAuth 1.0 continues to be supported for all API requests, but OAuth 2.0 is now preferred.
    type: OAuth 1.0
    settings:
      requestTokenUri: https://api.mysampleapi.com/1/oauth/request_token
      authorizationUri: https://api.mysampleapi.com/1/oauth/authorize
      tokenCredentialsUri: https://api.mysampleapi.com/1/oauth/access_token
      signatures: [ 'HMAC-SHA1', 'PLAINTEXT' ]
  oauth_2_0:
    description: |
      Dropbox supports OAuth 2.0 for authenticating all API requests.
    type: OAuth 2.0
    describedBy:
      headers:
        Authorization:
          description: |
             Used to send a valid OAuth 2 access token. Do not use
             with the "access_token" query string parameter.
          type: string
      queryParameters:
        access_token:
          description: |
             Used to send a valid OAuth 2 access token. Do not use with
             the "Authorization" header.
          type: string
      responses:
        401:
          description: |
              Bad or expired token. This can happen if the user or Dropbox
              revoked or expired an access token. To fix, re-authenticate
              the user.
        403:
          description: |
              Bad OAuth request (wrong consumer key, bad nonce, expired
              timestamp...). Unfortunately, re-authenticating the user won't help here.
    settings:
      authorizationUri: https://www.dropbox.com/1/oauth2/authorize
      accessTokenUri: https://api.dropbox.com/1/oauth2/token
      authorizationGrants: [ authorization_code, implicit, 'urn:ietf:params:oauth:grant-type:saml2-bearer' ]
  custom_scheme:
    description: |
      A custom security scheme for authenticating requests.
    type: x-custom
    describedBy:
      headers:
        SpecialToken:
          description: |
            Used to send a custom token.
          type: string
      responses:
        401:
          description: |
            Bad token.
        403:

securedBy: custom_scheme

uses:
  SongsLib: libraries/songs-library.raml
  ApiLib: libraries/api-library.raml

/api:
  type: ApiLib.collectionFromApiLib
  get:
    securedBy: [ ApiLib.basic_api ]
    queryString:
      properties:
        start?: number
        page-size?: number
  post:
    is: [ ApiLib.described ]
    body:
      application/json:
        type: ApiLib.RamlDataType
/entry:
  type:  collection
  post:
    responses:
      200:
        body: AnotherEntry
/songs:
  displayName: Songs
  description:  Access to all songs inside the music world library.
  (ready):
  is: [ secured ]
  type: SongsLib.collectionfromSongsLib
  get:
    securedBy: [ oauth_2_0, null ]
    (monitoringInterval): 30
    queryParameters:
      genre:
        description: filter the songs by genre
  post:
  /{songId}:
    get:
      (deprecated):
        date: 2016-02-28T16:41:41.090Z
        deprecatedBy:
          firstname: Christian
        comment: no comment
      responses:
        200:
          body:
            application/json:
              type: SongsLib.Song
            application/xml:
              type: !include schemas/songs.xsd
              example: !include examples/songs.xml
