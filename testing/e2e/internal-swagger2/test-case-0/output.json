{
  "swagger": "2.0",
  "info": {
    "title": "Swagger Petstore",
    "description": "This is a sample server Petstore server.\n\n[Learn about Swagger](http://swagger.wordnik.com) or join the IRC channel `#swagger` on irc.freenode.net.\n\nFor this sample, you can use the api key `special-key` to test the authorization filters\n",
    "termsOfService": "http://helloreverb.com/terms/",
    "version": "1.0.0",
    "contact": {
      "name": "apiteam@wordnik.com"
    },
    "license": {
      "name": "Apache 2.0",
      "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
    }
  },
  "host": "petstore.swagger.wordnik.com",
  "schemes": [
    "http",
    "https"
  ],
  "basePath": "/v2",
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/xml"
  ],
  "paths": {
    "/pets": {
      "post": {
        "summary": "Add a new pet to the store",
        "description": "This is a fairly long description about the API request /pets with Method POST",
        "operationId": "addPet",
        "tags": [
          "pet"
        ],
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "description": "Pet object that needs to be added to the store",
            "required": false,
            "schema": {
              "$ref": "#/definitions/Pet"
            },
            "in": "body",
            "name": "body"
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        },
        "schemes": [
          "https"
        ],
        "security": [
          {
            "petstore_auth": [
              "write_pets",
              "read_pets"
            ]
          }
        ]
      },
      "put": {
        "summary": "Update an existing pet",
        "operationId": "updatePet",
        "tags": [
          "pet"
        ],
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "description": "Pet object that needs to be added to the store",
            "required": false,
            "schema": {
              "$ref": "#/definitions/Pet"
            },
            "in": "body",
            "name": "body"
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Pet not found"
          },
          "405": {
            "description": "Validation exception"
          }
        },
        "security": [
          {
            "petstore_auth": [
              "write_pets",
              "read_pets"
            ]
          }
        ]
      }
    },
    "/pets/findByStatus": {
      "get": {
        "summary": "Finds Pets by status",
        "description": "Multiple status values can be provided with comma seperated strings",
        "operationId": "findPetsByStatus",
        "tags": [
          "pet"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "type": "array",
            "name": "status",
            "description": "Status values that need to be considered for filter",
            "required": false,
            "in": "query",
            "items": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Pet"
              }
            }
          },
          "400": {
            "description": "Invalid status value"
          }
        },
        "security": [
          {
            "petstore_auth": [
              "write_pets",
              "read_pets"
            ]
          }
        ]
      }
    },
    "/pets/findByTags": {
      "get": {
        "summary": "Finds Pets by tags",
        "description": "Muliple tags can be provided with comma seperated strings. Use tag1, tag2, tag3 for testing.",
        "operationId": "findPetsByTags",
        "tags": [
          "pet"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "type": "array",
            "name": "tags",
            "description": "Tags to filter by",
            "required": false,
            "in": "query",
            "items": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Pet"
              }
            }
          },
          "400": {
            "description": "Invalid tag value"
          }
        },
        "security": [
          {
            "petstore_auth": [
              "write_pets",
              "read_pets"
            ]
          }
        ]
      }
    },
    "/pets/{petId}": {
      "get": {
        "summary": "Find pet by ID",
        "description": "Returns a pet when ID < 10.  ID > 10 or nonintegers will simulate API error conditions",
        "operationId": "getPetById",
        "tags": [
          "pet"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Pet"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Pet not found"
          }
        },
        "security": [
          {
            "api_key": []
          },
          {
            "petstore_auth": [
              "write_pets",
              "read_pets"
            ]
          }
        ],
        "parameters": [
          {
            "type": "integer",
            "name": "petId",
            "description": "ID of pet that needs to be fetched",
            "required": true,
            "in": "path"
          }
        ]
      },
      "post": {
        "summary": "Updates a pet in the store with form data",
        "operationId": "updatePetWithForm",
        "tags": [
          "pet"
        ],
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "type": "string",
            "name": "name",
            "description": "Updated name of the pet",
            "required": true,
            "in": "formData"
          },
          {
            "type": "string",
            "name": "status",
            "description": "Updated status of the pet",
            "required": true,
            "in": "formData"
          },
          {
            "type": "integer",
            "name": "petId",
            "description": "ID of pet that needs to be fetched",
            "required": true,
            "in": "path"
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        },
        "security": [
          {
            "api_key": []
          },
          {
            "petstore_auth": [
              "write_pets",
              "read_pets"
            ]
          }
        ]
      },
      "delete": {
        "summary": "Deletes a pet",
        "operationId": "deletePet",
        "tags": [
          "pet"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "type": "string",
            "name": "api_key",
            "required": true,
            "in": "header"
          },
          {
            "type": "integer",
            "name": "petId",
            "description": "ID of pet that needs to be fetched",
            "required": true,
            "in": "path"
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid pet value"
          }
        },
        "security": [
          {
            "petstore_auth": [
              "write_pets",
              "read_pets"
            ]
          }
        ]
      }
    },
    "/stores/order": {
      "post": {
        "summary": "Place an order for a pet",
        "operationId": "placeOrder",
        "tags": [
          "store"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "description": "order placed for purchasing the pet",
            "required": false,
            "schema": {
              "$ref": "#/definitions/Order"
            },
            "in": "body",
            "name": "body"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Order"
            }
          },
          "400": {
            "description": "Invalid Order"
          }
        }
      }
    },
    "/stores/order/{orderId}": {
      "get": {
        "summary": "Find purchase order by ID",
        "description": "For valid response try integer IDs with value <= 5 or > 10. Other values will generated exceptions",
        "operationId": "getOrderById",
        "tags": [
          "store"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Order"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Order not found"
          }
        },
        "parameters": [
          {
            "type": "string",
            "name": "orderId",
            "description": "ID of pet that needs to be fetched",
            "required": true,
            "in": "path"
          }
        ]
      },
      "delete": {
        "summary": "Delete purchase order by ID",
        "description": "For valid response try integer IDs with value < 1000. Anything above 1000 or nonintegers will generate API errors",
        "operationId": "deleteOrder",
        "tags": [
          "store"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Order not found"
          }
        },
        "parameters": [
          {
            "type": "string",
            "name": "orderId",
            "description": "ID of pet that needs to be fetched",
            "required": true,
            "in": "path"
          }
        ]
      }
    },
    "/users": {
      "post": {
        "summary": "Create user",
        "description": "This can only be done by the logged in user.",
        "operationId": "createUser",
        "tags": [
          "user"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "description": "Created user object",
            "required": false,
            "schema": {
              "$ref": "#/definitions/User"
            },
            "in": "body",
            "name": "body"
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      }
    },
    "/users/createWithArray": {
      "post": {
        "summary": "Creates list of users with given input array",
        "operationId": "createUsersWithArrayInput",
        "tags": [
          "user"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "description": "List of user object",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/User"
              }
            },
            "in": "body",
            "name": "body"
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      }
    },
    "/users/createWithList": {
      "post": {
        "summary": "Creates list of users with given input array",
        "operationId": "createUsersWithListInput",
        "tags": [
          "user"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "description": "List of user object",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/User"
              }
            },
            "in": "body",
            "name": "body"
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      }
    },
    "/users/login": {
      "get": {
        "summary": "Logs user into the system",
        "operationId": "loginUser",
        "tags": [
          "user"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "type": "string",
            "name": "username",
            "description": "The user name for login",
            "required": false,
            "in": "query"
          },
          {
            "type": "string",
            "name": "password",
            "description": "The password for login in clear text",
            "required": false,
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "string"
            }
          },
          "400": {
            "description": "Invalid username/password supplied"
          }
        }
      }
    },
    "/users/logout": {
      "get": {
        "summary": "Logs out current logged in user session",
        "operationId": "logoutUser",
        "tags": [
          "user"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      }
    },
    "/users/{username}": {
      "get": {
        "summary": "Get user by user name",
        "operationId": "getUserByName",
        "tags": [
          "user"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/User"
            }
          },
          "400": {
            "description": "Invalid username supplied"
          },
          "404": {
            "description": "User not found"
          }
        },
        "parameters": [
          {
            "type": "string",
            "name": "username",
            "description": "The name that needs to be fetched. Use user1 for testing.",
            "required": true,
            "in": "path"
          }
        ]
      },
      "put": {
        "summary": "Updated user",
        "description": "This can only be done by the logged in user.",
        "operationId": "updateUser",
        "tags": [
          "user"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "description": "Updated user object",
            "required": false,
            "schema": {
              "$ref": "#/definitions/User"
            },
            "in": "body",
            "name": "body"
          },
          {
            "type": "string",
            "name": "username",
            "description": "The name that needs to be fetched. Use user1 for testing.",
            "required": true,
            "in": "path"
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid user supplied"
          },
          "404": {
            "description": "User not found"
          }
        }
      },
      "delete": {
        "summary": "Delete user",
        "description": "This can only be done by the logged in user.",
        "operationId": "deleteUser",
        "tags": [
          "user"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "responses": {
          "400": {
            "description": "Invalid username supplied"
          },
          "404": {
            "description": "User not found"
          }
        },
        "parameters": [
          {
            "type": "string",
            "name": "username",
            "description": "The name that needs to be fetched. Use user1 for testing.",
            "required": true,
            "in": "path"
          }
        ]
      }
    }
  },
  "definitions": {
    "User": {
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "username": {
          "type": "string"
        },
        "firstName": {
          "type": "string"
        },
        "pet": {
          "$ref": "#/definitions/Pet"
        },
        "lastName": {
          "type": "string"
        },
        "email": {
          "type": "string"
        },
        "password": {
          "type": "string"
        },
        "phone": {
          "type": "string"
        },
        "userStatus": {
          "type": "integer",
          "format": "int32",
          "description": "User Status"
        }
      }
    },
    "Category": {
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "name": {
          "type": "string"
        }
      }
    },
    "Pet": {
      "required": [
        "name",
        "photoUrls"
      ],
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "category": {
          "$ref": "#/definitions/Category"
        },
        "name": {
          "type": "string",
          "example": "doggie"
        },
        "owner": {
          "$ref": "#/definitions/User"
        },
        "photoUrls": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "tags": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Tag"
          }
        },
        "status": {
          "type": "string",
          "description": "pet status in the store"
        }
      }
    },
    "Tag": {
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "name": {
          "type": "string"
        }
      }
    },
    "Order": {
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "petId": {
          "type": "integer",
          "format": "int64"
        },
        "quantity": {
          "type": "integer",
          "format": "int32"
        },
        "shipDate": {
          "type": "string",
          "format": "date-time"
        },
        "status": {
          "type": "string",
          "description": "Order Status"
        },
        "complete": {
          "type": "boolean"
        }
      }
    }
  },
  "securityDefinitions": {
    "api_key": {
      "name": "api_key",
      "in": "header",
      "type": "apiKey"
    },
    "petstore_auth": {
      "description": "the authentication method for the Petstore API",
      "flow": "implicit",
      "authorizationUrl": "http://petstore.swagger.wordnik.com/api/oauth/dialog",
      "type": "oauth2",
      "scopes": {
        "write_pets": "modify pets in your account",
        "read_pets": "read your pets"
      }
    }
  },
  "tags": [
    {
      "name": "apiRequestMediaType",
      "description": "defines the common media type of requests in the API."
    }
  ]
}